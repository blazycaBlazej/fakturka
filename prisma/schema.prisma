// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  PARENT
  DIRECTOR
}

model Director {
  id       String    @id @default(uuid())
  role     Role      @default(DIRECTOR)
  email    String    @unique
  password String
  nurserys Nursery[]
}

model Nursery {
  id                String    @id @default(uuid())
  name              String
  bankAccountNumber String
  nip               String
  regon             String
  phoneNumber       String
  meals             String[]
  Director          Director  @relation(fields: [directorId], references: [id])
  directorId        String
  parantes          Parent[]
  invoices          Invoice[]
}

model Parent {
  id        String  @id @default(uuid())
  role      Role    @default(PARENT)
  email     String  @unique
  password  String
  name      String
  surName   String
  street    String
  zipCode   String
  city      String
  Nursery   Nursery @relation(fields: [nurseryId], references: [id])
  nurseryId String
  childs    Child[]
}

model Child {
  id            String    @id @default(uuid())
  name          String
  surName       String
  tuition       Float
  numberOfMeals String[]
  note          String    @db.Text
  Parent        Parent    @relation(fields: [parentId], references: [id])
  parentId      String
  invoices      Invoice[]
}

//faktura
model Invoice {
  id             String   @id @default(uuid())
  clientsName    String
  clientsSurName String
  clientsStreet  String
  clientsZipCode String
  clientsCity    String
  paymentDate    DateTime
  issueDate      String
  paymentAmount  Float
  Child          Child?   @relation(fields: [childId], references: [id])
  childId        String?
  Nursery        Nursery? @relation(fields: [nurseryId], references: [id])
  nurseryId      String?
}

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.Text
//   session_state      String?
//
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@unique([provider, providerAccountId])
// }
//
// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
//
// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
// }
//
// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime
//
//   @@unique([identifier, token])
// }

